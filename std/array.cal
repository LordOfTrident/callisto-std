include "assert.cal"

## ## a<
## Parameters: Array* src, Array* var
##
## Takes an array literal from the stack and writes it to the given variable
func a< begin
	let addr src
	let addr var
	var !
	src !

	src @ @ var @ !
	src @ Array.memberSize + @ var @ Array.memberSize + !
	src @ Array.elements + @ var @ Array.elements + !
end

## ## a@
## Parameters: cell offset, Array* array
##
## Returns array[offset]
##
## Currently supports 8-bit and cell size elements (more sizes will be added in the future)
func a@ begin
	let addr  arr
	let usize offset
	arr !
	offset !

	arr @ Array.memberSize + @ offset @ * offset !
	arr @ Array.elements + @ offset @ +

	if arr @ Array.memberSize + @ 1 = then
		b@
	elseif arr @ Array.memberSize + @ 2 = then
		w@
	elseif arr @ Array.memberSize + @ 4 = then
		d@
	else
		@
	end
end

## ## a!
## Parameters: cell value, cell offset, Array* array
##
## Writes value to array[offset]
##
## Currently supports 8-bit and cell size elements (more sizes will be added in the future)
func a! begin
	let addr  arr
	let usize offset

	arr !
	offset !

	arr @ Array.memberSize + @ offset @ * offset !
	arr @ Array.elements + @ offset @ +

	if arr @ Array.memberSize + @ 1 = then
		b!
	elseif arr @ Array.memberSize + @ 2 = then
		w@
	elseif arr @ Array.memberSize + @ 4 = then
		d@
	else
		!
	end
end

## ## a=
## Parameters: Array* arr1, Array* arr2
##
## Returns 1 if the arrays are equal, 0 if not (will soon be changed to max cell value
## if true)
func a= begin
	let addr arr1
	let addr arr2

	arr2 !
	arr1 !

	if arr1 @ @ arr2 @ @ = not then
		0 return
	end

	let cell i
	0 i !

	while i @ arr1 @ @ < do
		if i @ arr1 @ a@ i @ arr2 @ a@ = not then
			0 return
		end

		i @ 1 + i !
	end

	1
end

## ## al=
## Parameters: Array* arr1, Array arr2
##
## Same as a=, except the 2nd array is a literal from the stack
func al= begin
	let Array arr2
	arr2 a<

	arr2 a=
end

## ## allength
## Parameters: Array array
##
## Returns the length of an array literal
func allength begin
	let Array arr a<
	arr @
end

# Following 2 functions are going to soon be replaced, so not documented
func max begin
	let Array arr
	arr a<

	let cell i
	let cell ret
	1 i !
	0 arr a@ ret !
	while i @ arr @ < do
		if i @ arr a@ ret @ > then
			i @ arr a@ ret !
		end

		i @ 1 + i !
	end

	ret @
end

func min begin
	let Array arr
	arr a<

	let cell i
	let cell ret
	1 i !
	0 arr a@ ret !
	while i @ arr @ < do
		if i @ arr a@ ret @ < then
			i @ arr a@ ret !
		end

		i @ 1 + i !
	end

	ret @
end
