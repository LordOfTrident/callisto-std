func a< begin
	let addr var
	var !
	var @ Array.elements + !
	var @ Array.memberSize + !
	var @ !
end

func a@ begin
	let addr  arr
	let usize offset
	arr !
	offset !

	arr @ Array.memberSize + @ offset @ * offset !
	arr @ Array.elements + @ offset @ +

	if arr @ Array.memberSize + @ 1 = then
		c@
	else
		@
	end
end

func a! begin
	let addr  arr
	let usize offset

	arr !
	offset !

	arr @ Array.memberSize + @ offset @ * offset !
	arr @ Array.elements + @ offset @ +

	if arr @ Array.memberSize + @ 1 = then
		c!
	else
		!
	end
end

func a= begin
	let addr arr1
	let addr arr2

	arr2 !
	arr1 !

	if arr1 @ @ arr2 @ @ = not then
		0 return
	end

	let cell i
	0 i !

	while i @ arr1 @ @ < do
		if i @ arr1 @ a@ i @ arr2 @ a@ = not then
			0 return
		end

		i @ 1 + i !
	end

	1
end

func al= begin
	let Array arr2
	arr2 a<

	arr2 a=
end

func allength begin
	let Array arr a<
	arr @
end

func max begin
	let Array arr
	arr a<

	let cell i
	let cell ret
	1 i !
	0 arr a@ ret !
	while i @ arr @ < do
		if i @ arr a@ ret @ > then
			i @ arr a@ ret !
		end

		i @ 1 + i !
	end

	ret @
end

func min begin
	let Array arr
	arr a<

	let cell i
	let cell ret
	1 i !
	0 arr a@ ret !
	while i @ arr @ < do
		if i @ arr a@ ret @ < then
			i @ arr a@ ret !
		end

		i @ 1 + i !
	end

	ret @
end
