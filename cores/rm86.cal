feature IO

inline __rm86_pop_ax begin asm
	"sub si, 2"
	"mov ax, [si]"
end end

inline __rm86_pop_bx begin asm
	"sub si, 2"
	"mov bx, [si]"
end end

inline __rm86_pop_di begin asm
	"sub si, 2"
	"mov di, [si]"
end end

inline __rm86_push_ax begin asm
	"mov [si], ax"
	"add si, 2"
end end

inline __rm86_push_dx begin asm
	"mov [si], dx"
	"add si, 2"
end end

implements IO func printch begin
	__rm86_pop_ax
	asm
		"mov ah, 0x0E"
		"int 0x10"
	end
end

func = begin
	__rm86_pop_ax
	__rm86_pop_bx
	asm
		"cmp ax, bx"
		"je .push_1"
		"mov word [si], 0"
		"add si, 2"
		"ret"
		".push_1:"
		"mov word [si], 0xFFFF"
		"add si, 2"
	end
end

func > begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"cmp ax, bx"
		"jg .push_1"
		"mov word [si], 0"
		"add si, 2"
		"ret"
		".push_1:"
		"mov word [si], 0xFFFF"
		"add si, 2"
	end
end

func >= begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"cmp ax, bx"
		"jge .push_1"
		"mov word [si], 0"
		"add si, 2"
		"ret"
		".push_1:"
		"mov word [si], 0xFFFF"
		"add si, 2"
	end
end

func < begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"cmp ax, bx"
		"jl .push_1"
		"mov word [si], 0"
		"add si, 2"
		"ret"
		".push_1:"
		"mov word [si], 0xFFFF"
		"add si, 2"
	end
end

func <= begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"cmp ax, bx"
		"jle .push_1"
		"mov word [si], 0"
		"add si, 2"
		"ret"
		".push_1:"
		"mov word [si], 0xFFFF"
		"add si, 2"
	end
end

func @ begin
	__rm86_pop_bx
	asm
		"mov ax, [bx]"
	end
	__rm86_push_ax
end

func ! begin
	__rm86_pop_di
	__rm86_pop_bx
	asm
		"mov [di], bx"
	end
end

func c@ begin
	__rm86_pop_bx
	asm
		"xor ah, ah"
		"mov al, [bx]"
	end
	__rm86_push_ax
end

func c! begin
	__rm86_pop_di
	__rm86_pop_bx
	asm
		"mov [di], bl"
	end
end

func dup begin
	__rm86_pop_ax
	__rm86_push_ax
	__rm86_push_ax
end

func drop begin asm
	"sub si, 2"
end end

func + begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"add ax, bx"
	end
	__rm86_push_ax
end

func s+ begin + end

func - begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"sub ax, bx"
	end
	__rm86_push_ax
end

func s- begin - end

func * begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"mul bx"
	end
	__rm86_push_ax
end

func s* begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"imul bx"
	end
	__rm86_push_ax
end

func / begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"xor dx, dx"
		"div bx"
	end
	__rm86_push_ax
end

func s/ begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"xor dx, dx"
		"idiv bx"
	end
	__rm86_push_ax
end

func % begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"xor dx, dx"
		"div bx"
	end
	__rm86_push_dx
end

func s% begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"xor dx, dx"
		"idiv bx"
	end
	__rm86_push_dx
end
