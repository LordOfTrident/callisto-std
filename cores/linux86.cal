## Supported features: IO, Exit, Time, File
##
## Cell size = 64 bits
enable IO
enable Exit
enable Time
enable File

inline __linux86_pop_rdi begin asm
	"sub r15, 8"
	"mov rdi, [r15]"
end end

inline __linux86_pop_rsi begin asm
	"sub r15, 8"
	"mov rsi, [r15]"
end end

inline __linux86_pop_rax begin asm
	"sub r15, 8"
	"mov rax, [r15]"
end end

inline __linux86_pop_rbx begin asm
	"sub r15, 8"
	"mov rbx, [r15]"
end end

inline __linux86_pop_rcx begin asm
	"sub r15, 8"
	"mov rcx, [r15]"
end end

inline __linux86_pop_rdx begin asm
	"sub r15, 8"
	"mov rdx, [r15]"
end end

inline __linux86_push_rax begin asm
	"mov [r15], rax"
	"add r15, 8"
end end

inline __linux86_push_rbx begin asm
	"mov [r15], rbx"
	"add r15, 8"
end end

inline __linux86_push_rdx begin asm
	"mov [r15], rdx"
	"add r15, 8"
end end

func printch begin asm
	"sub r15, 8"
	"mov rsi, r15"
	"mov rax, 1"
	"mov rdi, 1"
	"mov rdx, 1"
	"syscall"
end end

func exit begin
	__linux86_pop_rdi
	asm
		"mov rax, 60"
		"syscall"
	end
end

func = begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"cmp rax, rbx"
		"je .push_1"
		"mov qword [r15], 0"
		"add r15, 8"
		"ret"
		".push_1:"
		"mov qword [r15], 0xFFFFFFFFFFFFFFFF"
		"add r15, 8"
	end
end

func > begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"cmp rax, rbx"
		"jg .push_1"
		"mov qword [r15], 0"
		"add r15, 8"
		"ret"
		".push_1:"
		"mov qword [r15], 0xFFFFFFFFFFFFFFFF"
		"add r15, 8"
	end
end

func >= begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"cmp rax, rbx"
		"jge .push_1"
		"mov qword [r15], 0"
		"add r15, 8"
		"ret"
		".push_1:"
		"mov qword [r15], 0xFFFFFFFFFFFFFFFF"
		"add r15, 8"
	end
end

func < begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"cmp rax, rbx"
		"jl .push_1"
		"mov qword [r15], 0"
		"add r15, 8"
		"ret"
		".push_1:"
		"mov qword [r15], 0xFFFFFFFFFFFFFFFF"
		"add r15, 8"
	end
end

func <= begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"cmp rax, rbx"
		"jle .push_1"
		"mov qword [r15], 0"
		"add r15, 8"
		"ret"
		".push_1:"
		"mov qword [r15], 0xFFFFFFFFFFFFFFFF"
		"add r15, 8"
	end
end

func @ begin
	__linux86_pop_rbx
	asm
		"mov rax, [rbx]"
	end
	__linux86_push_rax
end

func ! begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"mov [rbx], rax"
	end
end

func b@ begin
	__linux86_pop_rbx
	asm
		"xor rax, rax"
		"mov al, [rbx]"
	end
	__linux86_push_rax
end

func b! begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"mov [rbx], al"
	end
end

func w@ begin
	__linux86_pop_rbx
	asm
		"xor rax, rax"
		"mov ax, [rbx]"
	end
	__linux86_push_rax
end

func w! begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"mov [rbx], ax"
	end
end

func d@ begin
	__linux86_pop_rbx
	asm
		"xor rax, rax"
		"mov eax, [rbx]"
	end
	__linux86_push_rax
end

func d! begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"mov [rbx], eax"
	end
end

func dup begin
	__linux86_pop_rax
	__linux86_push_rax
	__linux86_push_rax
end

func drop begin asm
	"sub r15, 8"
end end

func swap begin
	__linux86_pop_rbx
	__linux86_pop_rax
	__linux86_push_rbx
	__linux86_pop_rax
end

func + begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"add rax, rbx"
	end
	__linux86_push_rax
end

func s+ begin + end

func - begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"sub rax, rbx"
	end
	__linux86_push_rax
end

func s- begin - end

func * begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"mul rbx"
	end
	__linux86_push_rax
end

func s* begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"imul rbx"
	end
	__linux86_push_rax
end

func / begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"xor rdx, rdx"
		"div rbx"
	end
	__linux86_push_rax
end

func s/ begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"xor rdx, rdx"
		"idiv rbx"
	end
	__linux86_push_rax
end

func % begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"xor rdx, rdx"
		"div rbx"
	end
	__linux86_push_rdx
end

func s% begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"xor rdx, rdx"
		"idiv rbx"
	end
	__linux86_push_rdx
end

func and begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"and rax, rbx"
	end
	__linux86_push_rax
end

func or begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"or rax, rbx"
	end
	__linux86_push_rax
end

func xor begin
	__linux86_pop_rbx
	__linux86_pop_rax
	asm
		"xor rax, rbx"
	end
	__linux86_push_rax
end

func not begin
	__linux86_pop_rax
	asm
		"not rax"
	end
	__linux86_push_rax
end

func << begin
	__linux86_pop_rcx
	__linux86_pop_rax
	asm
		"shl rax, cl"
	end
	__linux86_push_rax
end

func >> begin
	__linux86_pop_rcx
	__linux86_pop_rax
	asm
		"shr rax, cl"
	end
	__linux86_push_rax
end

func get_epoch_time begin
	asm
		"mov rax, 201" # time syscall
		"xor rdi, rdi"
		"syscall"
	end
	__linux86_push_rax # stuff is returned with rax right?
end

const FILE_READ 1
const FILE_WRITE 2
const __linux86_const_O_RDONLY 0
const __linux86_const_O_WRONLY 1
const __linux86_const_O_RDWR 2

struct File
	cell fd
end

func open_file begin
	let addr path
	let cell mode
	mode !
	path !

	let array 4096 u8 pathBytes
	let cell i
	let addr src
	let addr dest
	0 i !

	path @ Array.elements + @ src !
	pathBytes dest !

	while i @ path @ @ < do
		src @ b@ dest @ b!

		i @ 1 + i !
		src @ 1 + src !
		dest @ 1 + dest !
	end

	# just in case
	0 pathBytes 4095 + b!

	let cell modeFlag

	if FILE_READ FILE_WRITE and mode @ = then
		__linux86_const_O_RDWR modeFlag !
	elseif FILE_READ mode @ = then
		__linux86_const_O_RDONLY modeFlag !
	elseif FILE_WRITE mode @ = then
		__linux86_const_O_WRONLY modeFlag !
	end

	pathBytes
	modeFlag @

	__linux86_pop_rdx
	__linux86_pop_rdi
	asm
		"mov rax, 2" # open syscall
		"xor rsi, rsi"
		"syscall"
	end

	__linux86_push_rax
end

func file< begin
	!
end

func file@ begin
	let cell count
	let addr buf
	let cell fd

	count !
	buf !
	@ fd !

	count @
	buf @
	fd @

	__linux86_pop_rdi
	__linux86_pop_rsi
	__linux86_pop_rdx

	asm
		"xor rax, rax" # 0 = read
		"syscall"
	end
end
